// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gRPC.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChunksData struct {
	Chunks               []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunksData) Reset()         { *m = ChunksData{} }
func (m *ChunksData) String() string { return proto.CompactTextString(m) }
func (*ChunksData) ProtoMessage()    {}
func (*ChunksData) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{0}
}

func (m *ChunksData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunksData.Unmarshal(m, b)
}
func (m *ChunksData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunksData.Marshal(b, m, deterministic)
}
func (m *ChunksData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunksData.Merge(m, src)
}
func (m *ChunksData) XXX_Size() int {
	return xxx_messageInfo_ChunksData.Size(m)
}
func (m *ChunksData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunksData.DiscardUnknown(m)
}

var xxx_messageInfo_ChunksData proto.InternalMessageInfo

func (m *ChunksData) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ChunksResponse struct {
	Chunks               []*ChunkResponse `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChunksResponse) Reset()         { *m = ChunksResponse{} }
func (m *ChunksResponse) String() string { return proto.CompactTextString(m) }
func (*ChunksResponse) ProtoMessage()    {}
func (*ChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{1}
}

func (m *ChunksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunksResponse.Unmarshal(m, b)
}
func (m *ChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunksResponse.Marshal(b, m, deterministic)
}
func (m *ChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunksResponse.Merge(m, src)
}
func (m *ChunksResponse) XXX_Size() int {
	return xxx_messageInfo_ChunksResponse.Size(m)
}
func (m *ChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunksResponse proto.InternalMessageInfo

func (m *ChunksResponse) GetChunks() []*ChunkResponse {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ChunkResponse struct {
	Checksum             uint32   `protobuf:"varint,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Buf                  []byte   `protobuf:"bytes,2,opt,name=buf,proto3" json:"buf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkResponse) Reset()         { *m = ChunkResponse{} }
func (m *ChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResponse) ProtoMessage()    {}
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{2}
}

func (m *ChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResponse.Unmarshal(m, b)
}
func (m *ChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResponse.Merge(m, src)
}
func (m *ChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResponse.Size(m)
}
func (m *ChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResponse proto.InternalMessageInfo

func (m *ChunkResponse) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *ChunkResponse) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{3}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

type ChunkID struct {
	ChunkId              string   `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkID) Reset()         { *m = ChunkID{} }
func (m *ChunkID) String() string { return proto.CompactTextString(m) }
func (*ChunkID) ProtoMessage()    {}
func (*ChunkID) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{4}
}

func (m *ChunkID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkID.Unmarshal(m, b)
}
func (m *ChunkID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkID.Marshal(b, m, deterministic)
}
func (m *ChunkID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkID.Merge(m, src)
}
func (m *ChunkID) XXX_Size() int {
	return xxx_messageInfo_ChunkID.Size(m)
}
func (m *ChunkID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkID.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkID proto.InternalMessageInfo

func (m *ChunkID) GetChunkId() string {
	if m != nil {
		return m.ChunkId
	}
	return ""
}

type TableName struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableName) Reset()         { *m = TableName{} }
func (m *TableName) String() string { return proto.CompactTextString(m) }
func (*TableName) ProtoMessage()    {}
func (*TableName) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{5}
}

func (m *TableName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableName.Unmarshal(m, b)
}
func (m *TableName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableName.Marshal(b, m, deterministic)
}
func (m *TableName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableName.Merge(m, src)
}
func (m *TableName) XXX_Size() int {
	return xxx_messageInfo_TableName.Size(m)
}
func (m *TableName) XXX_DiscardUnknown() {
	xxx_messageInfo_TableName.DiscardUnknown(m)
}

var xxx_messageInfo_TableName proto.InternalMessageInfo

func (m *TableName) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type WriteBatch struct {
	IndexEntry           []*IndexEntry `protobuf:"bytes,1,rep,name=indexEntry,proto3" json:"indexEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WriteBatch) Reset()         { *m = WriteBatch{} }
func (m *WriteBatch) String() string { return proto.CompactTextString(m) }
func (*WriteBatch) ProtoMessage()    {}
func (*WriteBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{6}
}

func (m *WriteBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBatch.Unmarshal(m, b)
}
func (m *WriteBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBatch.Marshal(b, m, deterministic)
}
func (m *WriteBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBatch.Merge(m, src)
}
func (m *WriteBatch) XXX_Size() int {
	return xxx_messageInfo_WriteBatch.Size(m)
}
func (m *WriteBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBatch.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBatch proto.InternalMessageInfo

func (m *WriteBatch) GetIndexEntry() []*IndexEntry {
	if m != nil {
		return m.IndexEntry
	}
	return nil
}

type ReadBatch struct {
	Rows                 []*Row   `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadBatch) Reset()         { *m = ReadBatch{} }
func (m *ReadBatch) String() string { return proto.CompactTextString(m) }
func (*ReadBatch) ProtoMessage()    {}
func (*ReadBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{7}
}

func (m *ReadBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadBatch.Unmarshal(m, b)
}
func (m *ReadBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadBatch.Marshal(b, m, deterministic)
}
func (m *ReadBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadBatch.Merge(m, src)
}
func (m *ReadBatch) XXX_Size() int {
	return xxx_messageInfo_ReadBatch.Size(m)
}
func (m *ReadBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ReadBatch proto.InternalMessageInfo

func (m *ReadBatch) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Row struct {
	RangeValue           []byte   `protobuf:"bytes,1,opt,name=rangeValue,proto3" json:"rangeValue,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{8}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetRangeValue() []byte {
	if m != nil {
		return m.RangeValue
	}
	return nil
}

func (m *Row) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type IndexEntry struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	HashValue            string   `protobuf:"bytes,2,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	RangeValue           []byte   `protobuf:"bytes,3,opt,name=rangeValue,proto3" json:"rangeValue,omitempty"`
	Value                []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexEntry) Reset()         { *m = IndexEntry{} }
func (m *IndexEntry) String() string { return proto.CompactTextString(m) }
func (*IndexEntry) ProtoMessage()    {}
func (*IndexEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{9}
}

func (m *IndexEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexEntry.Unmarshal(m, b)
}
func (m *IndexEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexEntry.Marshal(b, m, deterministic)
}
func (m *IndexEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexEntry.Merge(m, src)
}
func (m *IndexEntry) XXX_Size() int {
	return xxx_messageInfo_IndexEntry.Size(m)
}
func (m *IndexEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IndexEntry proto.InternalMessageInfo

func (m *IndexEntry) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *IndexEntry) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *IndexEntry) GetRangeValue() []byte {
	if m != nil {
		return m.RangeValue
	}
	return nil
}

func (m *IndexEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type IndexQuery struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	HashValue            string   `protobuf:"bytes,2,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	RangeValuePrefix     []byte   `protobuf:"bytes,3,opt,name=rangeValuePrefix,proto3" json:"rangeValuePrefix,omitempty"`
	RangeValueStart      []byte   `protobuf:"bytes,4,opt,name=rangeValueStart,proto3" json:"rangeValueStart,omitempty"`
	ValueEqual           []byte   `protobuf:"bytes,5,opt,name=valueEqual,proto3" json:"valueEqual,omitempty"`
	Immutable            bool     `protobuf:"varint,6,opt,name=immutable,proto3" json:"immutable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexQuery) Reset()         { *m = IndexQuery{} }
func (m *IndexQuery) String() string { return proto.CompactTextString(m) }
func (*IndexQuery) ProtoMessage()    {}
func (*IndexQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{10}
}

func (m *IndexQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexQuery.Unmarshal(m, b)
}
func (m *IndexQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexQuery.Marshal(b, m, deterministic)
}
func (m *IndexQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexQuery.Merge(m, src)
}
func (m *IndexQuery) XXX_Size() int {
	return xxx_messageInfo_IndexQuery.Size(m)
}
func (m *IndexQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexQuery.DiscardUnknown(m)
}

var xxx_messageInfo_IndexQuery proto.InternalMessageInfo

func (m *IndexQuery) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *IndexQuery) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *IndexQuery) GetRangeValuePrefix() []byte {
	if m != nil {
		return m.RangeValuePrefix
	}
	return nil
}

func (m *IndexQuery) GetRangeValueStart() []byte {
	if m != nil {
		return m.RangeValueStart
	}
	return nil
}

func (m *IndexQuery) GetValueEqual() []byte {
	if m != nil {
		return m.ValueEqual
	}
	return nil
}

func (m *IndexQuery) GetImmutable() bool {
	if m != nil {
		return m.Immutable
	}
	return false
}

type UpdateTableRequest struct {
	Current              *TableDesc `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Expected             *TableDesc `protobuf:"bytes,2,opt,name=expected,proto3" json:"expected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateTableRequest) Reset()         { *m = UpdateTableRequest{} }
func (m *UpdateTableRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTableRequest) ProtoMessage()    {}
func (*UpdateTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{11}
}

func (m *UpdateTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTableRequest.Unmarshal(m, b)
}
func (m *UpdateTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTableRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTableRequest.Merge(m, src)
}
func (m *UpdateTableRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTableRequest.Size(m)
}
func (m *UpdateTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTableRequest proto.InternalMessageInfo

func (m *UpdateTableRequest) GetCurrent() *TableDesc {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *UpdateTableRequest) GetExpected() *TableDesc {
	if m != nil {
		return m.Expected
	}
	return nil
}

type DescribeTableResponse struct {
	Desc                 *TableDesc `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	IsActive             bool       `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DescribeTableResponse) Reset()         { *m = DescribeTableResponse{} }
func (m *DescribeTableResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeTableResponse) ProtoMessage()    {}
func (*DescribeTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{12}
}

func (m *DescribeTableResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeTableResponse.Unmarshal(m, b)
}
func (m *DescribeTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeTableResponse.Marshal(b, m, deterministic)
}
func (m *DescribeTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTableResponse.Merge(m, src)
}
func (m *DescribeTableResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeTableResponse.Size(m)
}
func (m *DescribeTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTableResponse proto.InternalMessageInfo

func (m *DescribeTableResponse) GetDesc() *TableDesc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *DescribeTableResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type TableDesc struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UseOnDemandIOMode    bool              `protobuf:"varint,2,opt,name=useOnDemandIOMode,proto3" json:"useOnDemandIOMode,omitempty"`
	ProvisionedRead      int64             `protobuf:"varint,3,opt,name=provisionedRead,proto3" json:"provisionedRead,omitempty"`
	ProvisionedWrite     int64             `protobuf:"varint,4,opt,name=provisionedWrite,proto3" json:"provisionedWrite,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TableDesc) Reset()         { *m = TableDesc{} }
func (m *TableDesc) String() string { return proto.CompactTextString(m) }
func (*TableDesc) ProtoMessage()    {}
func (*TableDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{13}
}

func (m *TableDesc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableDesc.Unmarshal(m, b)
}
func (m *TableDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableDesc.Marshal(b, m, deterministic)
}
func (m *TableDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDesc.Merge(m, src)
}
func (m *TableDesc) XXX_Size() int {
	return xxx_messageInfo_TableDesc.Size(m)
}
func (m *TableDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDesc.DiscardUnknown(m)
}

var xxx_messageInfo_TableDesc proto.InternalMessageInfo

func (m *TableDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDesc) GetUseOnDemandIOMode() bool {
	if m != nil {
		return m.UseOnDemandIOMode
	}
	return false
}

func (m *TableDesc) GetProvisionedRead() int64 {
	if m != nil {
		return m.ProvisionedRead
	}
	return 0
}

func (m *TableDesc) GetProvisionedWrite() int64 {
	if m != nil {
		return m.ProvisionedWrite
	}
	return 0
}

func (m *TableDesc) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListTablesResponse struct {
	Tables               []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTablesResponse) Reset()         { *m = ListTablesResponse{} }
func (m *ListTablesResponse) String() string { return proto.CompactTextString(m) }
func (*ListTablesResponse) ProtoMessage()    {}
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{14}
}

func (m *ListTablesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTablesResponse.Unmarshal(m, b)
}
func (m *ListTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTablesResponse.Marshal(b, m, deterministic)
}
func (m *ListTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTablesResponse.Merge(m, src)
}
func (m *ListTablesResponse) XXX_Size() int {
	return xxx_messageInfo_ListTablesResponse.Size(m)
}
func (m *ListTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTablesResponse proto.InternalMessageInfo

func (m *ListTablesResponse) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Chunks struct {
	ChunkInfo            []*ChunkInfo `protobuf:"bytes,1,rep,name=chunkInfo,proto3" json:"chunkInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Chunks) Reset()         { *m = Chunks{} }
func (m *Chunks) String() string { return proto.CompactTextString(m) }
func (*Chunks) ProtoMessage()    {}
func (*Chunks) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{15}
}

func (m *Chunks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunks.Unmarshal(m, b)
}
func (m *Chunks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunks.Marshal(b, m, deterministic)
}
func (m *Chunks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunks.Merge(m, src)
}
func (m *Chunks) XXX_Size() int {
	return xxx_messageInfo_Chunks.Size(m)
}
func (m *Chunks) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunks.DiscardUnknown(m)
}

var xxx_messageInfo_Chunks proto.InternalMessageInfo

func (m *Chunks) GetChunkInfo() []*ChunkInfo {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

type ChunkInfo struct {
	FingerPrint          int64     `protobuf:"varint,1,opt,name=fingerPrint,proto3" json:"fingerPrint,omitempty"`
	UserID               string    `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	From                 int64     `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	Through              int64     `protobuf:"varint,4,opt,name=through,proto3" json:"through,omitempty"`
	Metric               []*Labels `protobuf:"bytes,5,rep,name=metric,proto3" json:"metric,omitempty"`
	ChecksumSet          bool      `protobuf:"varint,6,opt,name=checksumSet,proto3" json:"checksumSet,omitempty"`
	Checksum             uint32    `protobuf:"varint,7,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Encoding             []byte    `protobuf:"bytes,8,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Encoded              []byte    `protobuf:"bytes,9,opt,name=encoded,proto3" json:"encoded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChunkInfo) Reset()         { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()    {}
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{16}
}

func (m *ChunkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkInfo.Unmarshal(m, b)
}
func (m *ChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkInfo.Marshal(b, m, deterministic)
}
func (m *ChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfo.Merge(m, src)
}
func (m *ChunkInfo) XXX_Size() int {
	return xxx_messageInfo_ChunkInfo.Size(m)
}
func (m *ChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfo proto.InternalMessageInfo

func (m *ChunkInfo) GetFingerPrint() int64 {
	if m != nil {
		return m.FingerPrint
	}
	return 0
}

func (m *ChunkInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ChunkInfo) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ChunkInfo) GetThrough() int64 {
	if m != nil {
		return m.Through
	}
	return 0
}

func (m *ChunkInfo) GetMetric() []*Labels {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *ChunkInfo) GetChecksumSet() bool {
	if m != nil {
		return m.ChecksumSet
	}
	return false
}

func (m *ChunkInfo) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *ChunkInfo) GetEncoding() []byte {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *ChunkInfo) GetEncoded() []byte {
	if m != nil {
		return m.Encoded
	}
	return nil
}

type Chunk struct {
	Buf                  []byte   `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TableName            string   `protobuf:"bytes,3,opt,name=tableName,proto3" json:"tableName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{17}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *Chunk) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Chunk) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type Labels struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Labels) Reset()         { *m = Labels{} }
func (m *Labels) String() string { return proto.CompactTextString(m) }
func (*Labels) ProtoMessage()    {}
func (*Labels) Descriptor() ([]byte, []int) {
	return fileDescriptor_90994c84dd9b32f5, []int{18}
}

func (m *Labels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Labels.Unmarshal(m, b)
}
func (m *Labels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Labels.Marshal(b, m, deterministic)
}
func (m *Labels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Labels.Merge(m, src)
}
func (m *Labels) XXX_Size() int {
	return xxx_messageInfo_Labels.Size(m)
}
func (m *Labels) XXX_DiscardUnknown() {
	xxx_messageInfo_Labels.DiscardUnknown(m)
}

var xxx_messageInfo_Labels proto.InternalMessageInfo

func (m *Labels) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Labels) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ChunksData)(nil), "grpc.ChunksData")
	proto.RegisterType((*ChunksResponse)(nil), "grpc.ChunksResponse")
	proto.RegisterType((*ChunkResponse)(nil), "grpc.ChunkResponse")
	proto.RegisterType((*Nothing)(nil), "grpc.Nothing")
	proto.RegisterType((*ChunkID)(nil), "grpc.ChunkID")
	proto.RegisterType((*TableName)(nil), "grpc.TableName")
	proto.RegisterType((*WriteBatch)(nil), "grpc.WriteBatch")
	proto.RegisterType((*ReadBatch)(nil), "grpc.ReadBatch")
	proto.RegisterType((*Row)(nil), "grpc.Row")
	proto.RegisterType((*IndexEntry)(nil), "grpc.IndexEntry")
	proto.RegisterType((*IndexQuery)(nil), "grpc.IndexQuery")
	proto.RegisterType((*UpdateTableRequest)(nil), "grpc.UpdateTableRequest")
	proto.RegisterType((*DescribeTableResponse)(nil), "grpc.DescribeTableResponse")
	proto.RegisterType((*TableDesc)(nil), "grpc.TableDesc")
	proto.RegisterMapType((map[string]string)(nil), "grpc.TableDesc.TagsEntry")
	proto.RegisterType((*ListTablesResponse)(nil), "grpc.ListTablesResponse")
	proto.RegisterType((*Chunks)(nil), "grpc.Chunks")
	proto.RegisterType((*ChunkInfo)(nil), "grpc.ChunkInfo")
	proto.RegisterType((*Chunk)(nil), "grpc.Chunk")
	proto.RegisterType((*Labels)(nil), "grpc.Labels")
}

func init() { proto.RegisterFile("gRPC.proto", fileDescriptor_90994c84dd9b32f5) }

var fileDescriptor_90994c84dd9b32f5 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0xda, 0x8e, 0xed, 0x3d, 0xb6, 0x49, 0x18, 0x0a, 0x5a, 0xcc, 0x8f, 0xac, 0x4d, 0x2f,
	0xdc, 0x36, 0x09, 0x6d, 0x10, 0x14, 0x81, 0x8a, 0x04, 0x71, 0x85, 0x2c, 0x95, 0xd6, 0x4c, 0x4a,
	0xe1, 0x0e, 0x8d, 0x77, 0x8f, 0xd7, 0xab, 0xd8, 0xbb, 0xee, 0xcc, 0x6c, 0x92, 0xde, 0xf0, 0x02,
	0x88, 0x47, 0xe1, 0x8d, 0x78, 0x18, 0x34, 0x3f, 0xfb, 0xe3, 0xb5, 0xcb, 0x4d, 0xef, 0xf6, 0x7c,
	0xe7, 0x9c, 0x39, 0xff, 0x9f, 0x0d, 0x10, 0xd1, 0xd9, 0xc5, 0xd9, 0x86, 0xa7, 0x32, 0x25, 0xad,
	0x88, 0x6f, 0x02, 0xff, 0x11, 0xc0, 0xc5, 0x32, 0x4b, 0xae, 0xc4, 0x84, 0x49, 0x46, 0x8e, 0xa1,
	0x1d, 0x68, 0xc9, 0x73, 0x46, 0xcd, 0x71, 0xef, 0xbc, 0x77, 0xa6, 0x8c, 0xce, 0xb4, 0x05, 0xb5,
	0x2a, 0xff, 0x09, 0xbc, 0x67, 0x5c, 0x28, 0x8a, 0x4d, 0x9a, 0x08, 0x24, 0x0f, 0x6a, 0x6e, 0x1f,
	0x54, 0xdd, 0xac, 0x51, 0xc5, 0x7d, 0xb0, 0xa5, 0x20, 0x43, 0xe8, 0x06, 0x4b, 0x0c, 0xae, 0x44,
	0xb6, 0xf6, 0x9c, 0x91, 0x33, 0x1e, 0xd0, 0x42, 0x26, 0x47, 0xd0, 0x9c, 0x67, 0x0b, 0xaf, 0x31,
	0x72, 0xc6, 0x7d, 0xaa, 0x3e, 0x7d, 0x17, 0x3a, 0xcf, 0x53, 0xb9, 0x8c, 0x93, 0xc8, 0x3f, 0x86,
	0x8e, 0x7e, 0x69, 0x3a, 0x21, 0x1e, 0x74, 0xf4, 0xf3, 0xd3, 0x50, 0x3f, 0xe1, 0xd2, 0x5c, 0xf4,
	0xef, 0x81, 0xfb, 0x92, 0xcd, 0x57, 0xf8, 0x9c, 0xad, 0x91, 0x7c, 0x0a, 0xae, 0xcc, 0x05, 0x6b,
	0x58, 0x02, 0xfe, 0xf7, 0x00, 0xbf, 0xf1, 0x58, 0xe2, 0x8f, 0x4c, 0x06, 0x4b, 0xf2, 0x10, 0x20,
	0x4e, 0x42, 0xbc, 0x7d, 0x9a, 0x48, 0xfe, 0xc6, 0x16, 0x76, 0x64, 0x0a, 0x9b, 0x16, 0x38, 0xad,
	0xd8, 0xf8, 0xf7, 0xc1, 0xa5, 0xc8, 0x42, 0xe3, 0xfe, 0x19, 0xb4, 0x78, 0x7a, 0x93, 0x77, 0xc4,
	0x35, 0x8e, 0x34, 0xbd, 0xa1, 0x1a, 0xf6, 0xbf, 0x83, 0x26, 0x4d, 0x6f, 0xc8, 0xe7, 0x00, 0x9c,
	0x25, 0x11, 0xbe, 0x62, 0xab, 0xcc, 0x64, 0xd4, 0xa7, 0x15, 0x84, 0xdc, 0x81, 0x83, 0x6b, 0xad,
	0x32, 0x1d, 0x30, 0x82, 0xff, 0x27, 0x40, 0x99, 0xc2, 0xff, 0x17, 0xa5, 0xb4, 0x4b, 0x26, 0x96,
	0xaf, 0x8a, 0x57, 0x5c, 0x5a, 0x02, 0xb5, 0xf8, 0xcd, 0xb7, 0xc7, 0x6f, 0x55, 0xe3, 0xff, 0xeb,
	0xd8, 0x04, 0x7e, 0xc9, 0xf0, 0x1d, 0x13, 0xb8, 0x0f, 0x47, 0x65, 0xb8, 0x19, 0xc7, 0x45, 0x7c,
	0x6b, 0xd3, 0xd8, 0xc1, 0xc9, 0x18, 0x0e, 0x4b, 0xec, 0x52, 0x32, 0x2e, 0x6d, 0x5a, 0x75, 0x58,
	0x95, 0xa5, 0x33, 0x7d, 0xfa, 0x3a, 0x63, 0x2b, 0xef, 0xc0, 0x94, 0x55, 0x22, 0x2a, 0xa7, 0x78,
	0xbd, 0xce, 0x74, 0x92, 0x5e, 0x7b, 0xe4, 0x8c, 0xbb, 0xb4, 0x04, 0xfc, 0x15, 0x90, 0x5f, 0x37,
	0x21, 0x93, 0xa8, 0x17, 0x87, 0xe2, 0xeb, 0x0c, 0x85, 0x24, 0xf7, 0xa0, 0x13, 0x64, 0x9c, 0x63,
	0x22, 0x75, 0x8d, 0xbd, 0xf3, 0x43, 0x33, 0x53, 0x6d, 0x34, 0x41, 0x11, 0xd0, 0x5c, 0x4f, 0x1e,
	0x40, 0x17, 0x6f, 0x37, 0x18, 0x48, 0x0c, 0x75, 0xc5, 0x7b, 0x6c, 0x0b, 0x03, 0xff, 0x77, 0xf8,
	0x50, 0x21, 0x3c, 0x9e, 0xe7, 0xf1, 0xec, 0x5d, 0x1c, 0x43, 0x2b, 0x44, 0x11, 0xbc, 0x2d, 0x9a,
	0x56, 0xaa, 0xe3, 0x89, 0xc5, 0x0f, 0x81, 0x8c, 0xaf, 0x4d, 0x73, 0xbb, 0xb4, 0x90, 0xfd, 0xbf,
	0x1a, 0x76, 0xf7, 0x95, 0x3d, 0x21, 0xd0, 0x4a, 0xca, 0x01, 0xe9, 0x6f, 0x72, 0x02, 0xef, 0x67,
	0x02, 0x5f, 0x24, 0x13, 0x5c, 0xb3, 0x24, 0x9c, 0xbe, 0xf8, 0x39, 0x0d, 0xf3, 0x67, 0x76, 0x15,
	0xaa, 0xff, 0x1b, 0x9e, 0x5e, 0xc7, 0x22, 0x4e, 0x13, 0x0c, 0xd5, 0xaa, 0xeb, 0x51, 0x35, 0x69,
	0x1d, 0x56, 0x53, 0xad, 0x40, 0xfa, 0xa8, 0xf4, 0xa8, 0x9a, 0x74, 0x07, 0x27, 0xa7, 0xd0, 0x92,
	0x2c, 0x12, 0xde, 0x81, 0x3e, 0x94, 0x8f, 0x6b, 0x65, 0x9e, 0xbd, 0x64, 0x91, 0x30, 0xa7, 0xa6,
	0xcd, 0x86, 0x8f, 0x55, 0x4d, 0x16, 0x52, 0xf4, 0x70, 0x85, 0x6f, 0x6c, 0x49, 0xea, 0x73, 0xfb,
	0x60, 0x5c, 0xbb, 0xb0, 0xdf, 0x36, 0xbe, 0x71, 0xfc, 0x13, 0x20, 0xcf, 0x62, 0x21, 0xf5, 0xcb,
	0x25, 0x75, 0x7d, 0x04, 0x6d, 0x3d, 0x74, 0x73, 0xa8, 0x2e, 0xb5, 0x92, 0xff, 0x18, 0xda, 0x86,
	0xe4, 0xc8, 0x29, 0xb8, 0x86, 0x4b, 0x92, 0x45, 0x6a, 0xaf, 0xf9, 0xb0, 0xc2, 0x6f, 0x0a, 0xa6,
	0xa5, 0x85, 0xff, 0x77, 0x03, 0xdc, 0x42, 0x41, 0x46, 0xd0, 0x5b, 0xc4, 0x49, 0x84, 0x7c, 0xc6,
	0x63, 0xbb, 0x38, 0x4d, 0x5a, 0x85, 0x54, 0x02, 0x99, 0x40, 0x3e, 0x9d, 0xd8, 0x8c, 0xad, 0xa4,
	0xc6, 0xb5, 0xe0, 0xe9, 0xda, 0x76, 0x58, 0x7f, 0x2b, 0x96, 0x93, 0x4b, 0x9e, 0x66, 0xd1, 0xd2,
	0x76, 0x33, 0x17, 0xc9, 0x5d, 0x68, 0xaf, 0x51, 0xf2, 0x38, 0xb0, 0x6d, 0xec, 0x9b, 0x0c, 0x9f,
	0xb1, 0x39, 0xae, 0x04, 0xb5, 0x3a, 0x95, 0x4d, 0xce, 0xac, 0x97, 0x28, 0xed, 0xe2, 0x57, 0xa1,
	0x2d, 0x2e, 0xee, 0xd4, 0xb8, 0x78, 0x08, 0x5d, 0x4c, 0x82, 0x34, 0x8c, 0x93, 0xc8, 0xeb, 0xea,
	0x93, 0x2a, 0x64, 0x95, 0x99, 0xfe, 0xc6, 0xd0, 0x73, 0xb5, 0x2a, 0x17, 0xfd, 0x29, 0x1c, 0xe8,
	0x76, 0xe4, 0x54, 0xee, 0x14, 0x54, 0x9e, 0x4f, 0xaf, 0x51, 0x4e, 0x6f, 0x8b, 0x49, 0x9a, 0x75,
	0x7e, 0x3e, 0x87, 0xb6, 0x29, 0x68, 0xef, 0x2e, 0xef, 0x9d, 0xfc, 0xf9, 0x3f, 0x2d, 0x00, 0xd5,
	0x8a, 0x3f, 0x84, 0x4c, 0xb9, 0x5a, 0x36, 0xd0, 0xf4, 0x6c, 0x56, 0xcf, 0xd2, 0x79, 0x49, 0xfa,
	0xc3, 0x81, 0x41, 0xec, 0x2f, 0x0c, 0x79, 0x04, 0xa0, 0x29, 0x6e, 0xc6, 0x22, 0x14, 0xa4, 0xca,
	0xfe, 0x1a, 0x1e, 0xda, 0x45, 0x28, 0x58, 0xff, 0xa1, 0x43, 0x4e, 0xc0, 0x9d, 0x65, 0xd2, 0xee,
	0xce, 0x51, 0x65, 0x51, 0xf4, 0x2f, 0x6c, 0x3d, 0xc0, 0x17, 0xe0, 0xfe, 0x84, 0xb9, 0x75, 0xbf,
	0x6a, 0x3d, 0xbc, 0x53, 0x95, 0x8a, 0x7d, 0x3d, 0x81, 0xfe, 0x04, 0x57, 0x28, 0xd1, 0xfa, 0x0c,
	0xaa, 0xab, 0x38, 0xa9, 0x3f, 0xff, 0x15, 0x40, 0xb9, 0xf3, 0x64, 0x5b, 0x39, 0xf4, 0xec, 0x8e,
	0xec, 0x1e, 0xc5, 0x29, 0xf4, 0x2e, 0x38, 0xe6, 0x04, 0x48, 0xea, 0xd4, 0x53, 0x8f, 0x72, 0x0a,
	0x3d, 0x93, 0xd3, 0xae, 0xb9, 0x9a, 0x5b, 0xdd, 0xfc, 0x09, 0x0c, 0xb6, 0x08, 0x6f, 0xd7, 0xe1,
	0x13, 0x03, 0xec, 0xa7, 0xc5, 0xaf, 0xa1, 0x57, 0x61, 0x67, 0x62, 0xab, 0xd8, 0x25, 0xec, 0x7a,
	0xd8, 0xbb, 0xd0, 0xba, 0x94, 0xe9, 0xa6, 0xde, 0x85, 0x6d, 0x71, 0xde, 0xd6, 0x7f, 0x8e, 0xbe,
	0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x31, 0xd9, 0xd9, 0xd8, 0x2a, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcStoreClient is the client API for GrpcStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcStoreClient interface {
	//index-client
	BatchWrite(ctx context.Context, in *WriteBatch, opts ...grpc.CallOption) (*Nothing, error)
	QueryPages(ctx context.Context, in *IndexQuery, opts ...grpc.CallOption) (GrpcStore_QueryPagesClient, error)
	//storage-client
	PutChunks(ctx context.Context, in *ChunksData, opts ...grpc.CallOption) (*Nothing, error)
	GetChunks(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*ChunksResponse, error)
	DeleteChunks(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (*Nothing, error)
	//table-client
	ListTables(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ListTablesResponse, error)
	CreateTable(ctx context.Context, in *TableDesc, opts ...grpc.CallOption) (*Nothing, error)
	DeleteTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Nothing, error)
	DescribeTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*DescribeTableResponse, error)
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*Nothing, error)
	//used by storage-client & index-client
	Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
}

type grpcStoreClient struct {
	cc *grpc.ClientConn
}

func NewGrpcStoreClient(cc *grpc.ClientConn) GrpcStoreClient {
	return &grpcStoreClient{cc}
}

func (c *grpcStoreClient) BatchWrite(ctx context.Context, in *WriteBatch, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/BatchWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) QueryPages(ctx context.Context, in *IndexQuery, opts ...grpc.CallOption) (GrpcStore_QueryPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcStore_serviceDesc.Streams[0], "/grpc.grpc_store/QueryPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcStoreQueryPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcStore_QueryPagesClient interface {
	Recv() (*ReadBatch, error)
	grpc.ClientStream
}

type grpcStoreQueryPagesClient struct {
	grpc.ClientStream
}

func (x *grpcStoreQueryPagesClient) Recv() (*ReadBatch, error) {
	m := new(ReadBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcStoreClient) PutChunks(ctx context.Context, in *ChunksData, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/PutChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) GetChunks(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*ChunksResponse, error) {
	out := new(ChunksResponse)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/GetChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) DeleteChunks(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/DeleteChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) ListTables(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) CreateTable(ctx context.Context, in *TableDesc, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) DeleteTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) DescribeTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*DescribeTableResponse, error) {
	out := new(DescribeTableResponse)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/DescribeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/UpdateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStoreClient) Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/grpc.grpc_store/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcStoreServer is the server API for GrpcStore service.
type GrpcStoreServer interface {
	//index-client
	BatchWrite(context.Context, *WriteBatch) (*Nothing, error)
	QueryPages(*IndexQuery, GrpcStore_QueryPagesServer) error
	//storage-client
	PutChunks(context.Context, *ChunksData) (*Nothing, error)
	GetChunks(context.Context, *Chunks) (*ChunksResponse, error)
	DeleteChunks(context.Context, *ChunkID) (*Nothing, error)
	//table-client
	ListTables(context.Context, *Nothing) (*ListTablesResponse, error)
	CreateTable(context.Context, *TableDesc) (*Nothing, error)
	DeleteTable(context.Context, *TableName) (*Nothing, error)
	DescribeTable(context.Context, *TableName) (*DescribeTableResponse, error)
	UpdateTable(context.Context, *UpdateTableRequest) (*Nothing, error)
	//used by storage-client & index-client
	Stop(context.Context, *Nothing) (*Nothing, error)
}

// UnimplementedGrpcStoreServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcStoreServer struct {
}

func (*UnimplementedGrpcStoreServer) BatchWrite(ctx context.Context, req *WriteBatch) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWrite not implemented")
}
func (*UnimplementedGrpcStoreServer) QueryPages(req *IndexQuery, srv GrpcStore_QueryPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryPages not implemented")
}
func (*UnimplementedGrpcStoreServer) PutChunks(ctx context.Context, req *ChunksData) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChunks not implemented")
}
func (*UnimplementedGrpcStoreServer) GetChunks(ctx context.Context, req *Chunks) (*ChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunks not implemented")
}
func (*UnimplementedGrpcStoreServer) DeleteChunks(ctx context.Context, req *ChunkID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunks not implemented")
}
func (*UnimplementedGrpcStoreServer) ListTables(ctx context.Context, req *Nothing) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (*UnimplementedGrpcStoreServer) CreateTable(ctx context.Context, req *TableDesc) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedGrpcStoreServer) DeleteTable(ctx context.Context, req *TableName) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (*UnimplementedGrpcStoreServer) DescribeTable(ctx context.Context, req *TableName) (*DescribeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (*UnimplementedGrpcStoreServer) UpdateTable(ctx context.Context, req *UpdateTableRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (*UnimplementedGrpcStoreServer) Stop(ctx context.Context, req *Nothing) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterGrpcStoreServer(s *grpc.Server, srv GrpcStoreServer) {
	s.RegisterService(&_GrpcStore_serviceDesc, srv)
}

func _GrpcStore_BatchWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).BatchWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/BatchWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).BatchWrite(ctx, req.(*WriteBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_QueryPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndexQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcStoreServer).QueryPages(m, &grpcStoreQueryPagesServer{stream})
}

type GrpcStore_QueryPagesServer interface {
	Send(*ReadBatch) error
	grpc.ServerStream
}

type grpcStoreQueryPagesServer struct {
	grpc.ServerStream
}

func (x *grpcStoreQueryPagesServer) Send(m *ReadBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcStore_PutChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunksData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).PutChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/PutChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).PutChunks(ctx, req.(*ChunksData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_GetChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).GetChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/GetChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).GetChunks(ctx, req.(*Chunks))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_DeleteChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).DeleteChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/DeleteChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).DeleteChunks(ctx, req.(*ChunkID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).ListTables(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).CreateTable(ctx, req.(*TableDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).DeleteTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/DescribeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).DescribeTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStore_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStoreServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.grpc_store/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStoreServer).Stop(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.grpc_store",
	HandlerType: (*GrpcStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchWrite",
			Handler:    _GrpcStore_BatchWrite_Handler,
		},
		{
			MethodName: "PutChunks",
			Handler:    _GrpcStore_PutChunks_Handler,
		},
		{
			MethodName: "GetChunks",
			Handler:    _GrpcStore_GetChunks_Handler,
		},
		{
			MethodName: "DeleteChunks",
			Handler:    _GrpcStore_DeleteChunks_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _GrpcStore_ListTables_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _GrpcStore_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _GrpcStore_DeleteTable_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _GrpcStore_DescribeTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _GrpcStore_UpdateTable_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _GrpcStore_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryPages",
			Handler:       _GrpcStore_QueryPages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gRPC.proto",
}
